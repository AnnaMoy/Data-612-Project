# Load libraries
library(recommenderlab)
library(Matrix)
# Load the built-in Jester5k dataset (5,000 users × 100 jokes)
data(Jester5k, package = "recommenderlab")
rrm <- Jester5k
# 80–20 split, 10 observed ratings per user retained for "known"
set.seed(123)
scheme <- evaluationScheme(rrm, method = "split", train = 0.8, given = 10, goodRating = 3)
# User-User Collaborative Filtering (UBCF)
rec_UBCF <- Recommender(getData(scheme, "train"), method = "UBCF")
# SVD-based model
rec_SVD <- Recommender(getData(scheme, "train"), method = "SVD")
# Predict ratings
pred_UBCF <- predict(rec_UBCF, getData(scheme, "known"), type = "ratings")
pred_SVD  <- predict(rec_SVD,  getData(scheme, "known"), type = "ratings")
# Evaluate accuracy (RMSE/MAE)
acc <- rbind(
UBCF = calcPredictionAccuracy(pred_UBCF, getData(scheme, "unknown")),
SVD  = calcPredictionAccuracy(pred_SVD,  getData(scheme, "unknown"))
)
print(acc)
#Diversity by Shuffling
# ===== NEW: Replace Most Similar Item with Least Similar =====
diverse_replace <- lapply(original_items_int, function(item_list) {
if (length(item_list) < 2) return(item_list)  # skip too-short lists
pairs <- combn(item_list, 2)
sims <- apply(pairs, 2, function(pair) item_sim[pair[1], pair[2]])
most_similar_pair <- which.max(sims)
item_to_remove <- pairs[1, most_similar_pair]
reduced_list <- item_list[item_list != item_to_remove]
# Find least similar replacement from all items not in the list
all_items <- setdiff(1:ncol(rrm), item_list)
if (length(all_items) == 0) return(reduced_list)
avg_sims <- sapply(all_items, function(j) mean(item_sim[j, reduced_list]))
least_similar <- all_items[which.min(avg_sims)]
c(reduced_list, least_similar)
})
# Rebuild new top5List object
pred_diverse <- new("topNList",
items = diverse_list,
itemLabels = colnames(rrm),
n = as.integer(5))
# Load libraries
library(recommenderlab)
library(Matrix)
# Load the built-in Jester5k dataset (5,000 users × 100 jokes)
data(Jester5k, package = "recommenderlab")
rrm <- Jester5k
# 80–20 split, 10 observed ratings per user retained for "known"
set.seed(123)
scheme <- evaluationScheme(rrm, method = "split", train = 0.8, given = 10, goodRating = 3)
# User-User Collaborative Filtering (UBCF)
rec_UBCF <- Recommender(getData(scheme, "train"), method = "UBCF")
# SVD-based model
rec_SVD <- Recommender(getData(scheme, "train"), method = "SVD")
# Predict ratings
pred_UBCF <- predict(rec_UBCF, getData(scheme, "known"), type = "ratings")
pred_SVD  <- predict(rec_SVD,  getData(scheme, "known"), type = "ratings")
# Evaluate accuracy (RMSE/MAE)
acc <- rbind(
UBCF = calcPredictionAccuracy(pred_UBCF, getData(scheme, "unknown")),
SVD  = calcPredictionAccuracy(pred_SVD,  getData(scheme, "unknown"))
)
print(acc)
# ===== ORIGINAL SVD TOP-5 =====
topN_SVD <- predict(rec_SVD, getData(scheme, "known"), type = "topNList", n = 5)
original_items <- as(topN_SVD, "list")
original_items_int <- lapply(original_items, function(x) match(x, colnames(rrm)))
# ===== NEW: Cosine similarity matrix for jokes =====
item_sim <- similarity(rrm, method = "cosine", which = "items")
item_sim <- as.matrix(item_sim)
# ===== NEW: Replace Most Similar Item with Least Similar =====
diverse_replace <- lapply(original_items_int, function(item_list) {
if (length(item_list) < 2) return(item_list)  # skip too-short lists
pairs <- combn(item_list, 2)
sims <- apply(pairs, 2, function(pair) item_sim[pair[1], pair[2]])
most_similar_pair <- which.max(sims)
item_to_remove <- pairs[1, most_similar_pair]
reduced_list <- item_list[item_list != item_to_remove]
# Find least similar replacement from all items not in the list
all_items <- setdiff(1:ncol(rrm), item_list)
if (length(all_items) == 0) return(reduced_list)
avg_sims <- sapply(all_items, function(j) mean(item_sim[j, reduced_list]))
least_similar <- all_items[which.min(avg_sims)]
c(reduced_list, least_similar)
})
# Reconstruct topNList
pred_diverse <- new("topNList",
items = diverse_replace,
itemLabels = colnames(rrm),
n = as.integer(5))
# ===== Shuffle Strategy (from original code) =====
set.seed(123)
diverse_shuffled <- lapply(original_items, function(x) {
sampled_chars <- sample(x, length(x))
match(sampled_chars, colnames(rrm))
})
pred_shuffled <- new("topNList",
items = diverse_shuffled,
itemLabels = colnames(rrm),
n = as.integer(5))
# Approximate precision for diverse SCD recommendations:
# Check how many recommended items appear in the unknown/test data for each user
unknown_data <- getData(scheme, "unknown")
calc_precision_recall <- function(pred_list) {
lists <- as(pred_list, "list")
precision <- mean(sapply(seq_along(lists), function(u) {
recommended <- lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(recommended) == 0) return(NA)
length(intersect(recommended, relevant)) / length(recommended)
}), na.rm = TRUE)
recall <- mean(sapply(seq_along(lists), function(u) {
recommended <- lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(relevant) == 0) return(NA)
length(intersect(recommended, relevant)) / length(relevant)
}), na.rm = TRUE)
return(c(Precision = precision, Recall = recall))
}
# Calculate precision/recall
pr_orig <- calc_precision_recall(topN_SVD)
pr_shuf <- calc_precision_recall(pred_shuffled)
pr_divr <- calc_precision_recall(pred_diverse)
#Compares the original SVD and Diverse SVD
# Load libraries
library(recommenderlab)
library(Matrix)
# Load the built-in Jester5k dataset (5,000 users × 100 jokes)
data(Jester5k, package = "recommenderlab")
rrm <- Jester5k
# 80–20 split, 10 observed ratings per user retained for "known"
set.seed(123)
scheme <- evaluationScheme(rrm, method = "split", train = 0.8, given = 10, goodRating = 3)
# User-User Collaborative Filtering (UBCF)
rec_UBCF <- Recommender(getData(scheme, "train"), method = "UBCF")
# SVD-based model
rec_SVD <- Recommender(getData(scheme, "train"), method = "SVD")
# Predict ratings
pred_UBCF <- predict(rec_UBCF, getData(scheme, "known"), type = "ratings")
pred_SVD  <- predict(rec_SVD,  getData(scheme, "known"), type = "ratings")
# Evaluate accuracy (RMSE/MAE)
acc <- rbind(
UBCF = calcPredictionAccuracy(pred_UBCF, getData(scheme, "unknown")),
SVD  = calcPredictionAccuracy(pred_SVD,  getData(scheme, "unknown"))
)
print(acc)
# ===== ORIGINAL SVD TOP-5 =====
topN_SVD <- predict(rec_SVD, getData(scheme, "known"), type = "topNList", n = 5)
original_items <- as(topN_SVD, "list")
original_items_int <- lapply(original_items, function(x) match(x, colnames(rrm)))
# ===== NEW: Cosine similarity matrix for jokes =====
item_sim <- similarity(rrm, method = "cosine", which = "items")
item_sim <- as.matrix(item_sim)
# ===== NEW: Replace Most Similar Item with Least Similar =====
diverse_replace <- lapply(original_items_int, function(item_list) {
if (length(item_list) < 2) return(item_list)  # skip too-short lists
pairs <- combn(item_list, 2)
sims <- apply(pairs, 2, function(pair) item_sim[pair[1], pair[2]])
most_similar_pair <- which.max(sims)
item_to_remove <- pairs[1, most_similar_pair]
reduced_list <- item_list[item_list != item_to_remove]
# Find least similar replacement from all items not in the list
all_items <- setdiff(1:ncol(rrm), item_list)
if (length(all_items) == 0) return(reduced_list)
avg_sims <- sapply(all_items, function(j) mean(item_sim[j, reduced_list]))
least_similar <- all_items[which.min(avg_sims)]
c(reduced_list, least_similar)
})
# Reconstruct topNList
pred_diverse <- new("topNList",
items = diverse_replace,
itemLabels = colnames(rrm),
n = as.integer(5))
# ===== Shuffle Strategy (from original code) =====
set.seed(123)
diverse_shuffled <- lapply(original_items, function(x) {
sampled_chars <- sample(x, length(x))
match(sampled_chars, colnames(rrm))
})
pred_shuffled <- new("topNList",
items = diverse_shuffled,
itemLabels = colnames(rrm),
n = as.integer(5))
# Gives you precision and recall of the original SVD top 5 listed.
# Evaluate original SVD top-N recommendations
eval_orig <- evaluate(scheme, method = "SVD", type = "topNList", n = 5)
avg_prec_orig <- avg(eval_orig, "prec")
avg_rec_orig <- avg(eval_orig, "rec")
cat(sprintf("Original Precision: %.3f, Recall: %.3f\n", avg_prec_orig, avg_rec_orig))
# print some approximation or note on diverse recommendations accuracy here
# Approximate precision for diverse SCD recommendations:
# Check how many recommended items appear in the unknown/test data for each user
unknown_data <- getData(scheme, "unknown")
calc_precision_recall <- function(pred_list) {
lists <- as(pred_list, "list")
precision <- mean(sapply(seq_along(lists), function(u) {
recommended <- lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(recommended) == 0) return(NA)
length(intersect(recommended, relevant)) / length(recommended)
}), na.rm = TRUE)
recall <- mean(sapply(seq_along(lists), function(u) {
recommended <- lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(relevant) == 0) return(NA)
length(intersect(recommended, relevant)) / length(relevant)
}), na.rm = TRUE)
return(c(Precision = precision, Recall = recall))
}
# Calculate precision/recall
pr_orig <- calc_precision_recall(topN_SVD)
pr_shuf <- calc_precision_recall(pred_shuffled)
pr_divr <- calc_precision_recall(pred_diverse)
#Compares the original SVD and Diverse SVD
unknown_data <- getData(scheme, "unknown")
diverse_lists <- as(pred_diverse, "list")
# ===== Coverage: number of unique items recommended =====
coverage <- function(item_lists) length(unique(unlist(item_lists)))
cov_orig <- coverage(original_items_int)
cov_shuf <- coverage(diverse_shuffled)
cov_divr <- coverage(diverse_replace)
# Precision
precision_diverse <- mean(sapply(seq_along(diverse_lists), function(u) {
recommended <- diverse_lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(recommended) == 0) return(NA)
length(intersect(recommended, relevant)) / length(recommended)
}), na.rm = TRUE)
# Recall
recall_diverse <- mean(sapply(seq_along(diverse_lists), function(u) {
recommended <- diverse_lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(relevant) == 0) return(NA)
length(intersect(recommended, relevant)) / length(relevant)
}), na.rm = TRUE)
unknown_data <- getData(scheme, "unknown")
diverse_lists <- as(pred_diverse, "list")
# Precision
precision_diverse <- mean(sapply(seq_along(diverse_lists), function(u) {
recommended <- diverse_lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(recommended) == 0) return(NA)
length(intersect(recommended, relevant)) / length(recommended)
}), na.rm = TRUE)
# Recall
recall_diverse <- mean(sapply(seq_along(diverse_lists), function(u) {
recommended <- diverse_lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(relevant) == 0) return(NA)
length(intersect(recommended, relevant)) / length(relevant)
}), na.rm = TRUE)
library(proxy)
item_sim <- similarity(rrm, method = "cosine", which = "items")
item_sim <- as.matrix(item_sim)  # <-- convert to matrix
intra_list_similarity <- function(item_list, sim_matrix) {
if (length(item_list) < 2) return(0)
pairs <- combn(item_list, 2)
sims <- apply(pairs, 2, function(pair) sim_matrix[pair[1], pair[2]])
mean(sims)
}
original_items_int <- lapply(original_items, function(x) match(x, colnames(rrm)))
ils_values <- sapply(original_items_int, function(x) intra_list_similarity(x, sim_matrix = item_sim))
avg_ils_orig <- mean(ils_values)
cat("Average intra-list similarity (original):", avg_ils_orig, "\n")
cat("Original SVD diversity (intra-list similarity): ", avg_ils_orig, "\n")
avg_ils_diverse <- mean(sapply(diverse_list, function(x) intra_list_similarity(x, sim_matrix = item_sim)))
# Approximate precision for diverse SCD recommendations:
# Check how many recommended items appear in the unknown/test data for each user
unknown_data <- getData(scheme, "unknown")
calc_precision_recall <- function(pred_list) {
lists <- as(pred_list, "list")
precision <- mean(sapply(seq_along(lists), function(u) {
recommended <- lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(recommended) == 0) return(NA)
length(intersect(recommended, relevant)) / length(recommended)
}), na.rm = TRUE)
recall <- mean(sapply(seq_along(lists), function(u) {
recommended <- lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(relevant) == 0) return(NA)
length(intersect(recommended, relevant)) / length(relevant)
}), na.rm = TRUE)
return(c(Precision = precision, Recall = recall))
}
# Calculate precision/recall
pr_orig <- calc_precision_recall(topN_SVD)
pr_shuf <- calc_precision_recall(pred_shuffled)
pr_divr <- calc_precision_recall(pred_diverse)
#Compares the original SVD and Diverse SVD
unknown_data <- getData(scheme, "unknown")
diverse_lists <- as(pred_diverse, "list")
# Precision
precision_diverse <- mean(sapply(seq_along(diverse_lists), function(u) {
recommended <- diverse_lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(recommended) == 0) return(NA)
length(intersect(recommended, relevant)) / length(recommended)
}), na.rm = TRUE)
# Recall
recall_diverse <- mean(sapply(seq_along(diverse_lists), function(u) {
recommended <- diverse_lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(relevant) == 0) return(NA)
length(intersect(recommended, relevant)) / length(relevant)
}), na.rm = TRUE)
unknown_data <- getData(scheme, "unknown")
diverse_lists <- as(pred_diverse, "list")
# Precision
precision_diverse <- mean(sapply(seq_along(diverse_lists), function(u) {
recommended <- diverse_lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(recommended) == 0) return(NA)
length(intersect(recommended, relevant)) / length(recommended)
}), na.rm = TRUE)
# Recall
recall_diverse <- mean(sapply(seq_along(diverse_lists), function(u) {
recommended <- diverse_lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(relevant) == 0) return(NA)
length(intersect(recommended, relevant)) / length(relevant)
}), na.rm = TRUE)
library(proxy)
item_sim <- similarity(rrm, method = "cosine", which = "items")
item_sim <- as.matrix(item_sim)  # <-- convert to matrix
intra_list_similarity <- function(item_list, sim_matrix) {
if (length(item_list) < 2) return(0)
pairs <- combn(item_list, 2)
sims <- apply(pairs, 2, function(pair) sim_matrix[pair[1], pair[2]])
mean(sims)
}
original_items_int <- lapply(original_items, function(x) match(x, colnames(rrm)))
ils_values <- sapply(original_items_int, function(x) intra_list_similarity(x, sim_matrix = item_sim))
avg_ils_orig <- mean(ils_values)
cat("Average intra-list similarity (original):", avg_ils_orig, "\n")
cat("Original SVD diversity (intra-list similarity): ", avg_ils_orig, "\n")
avg_ils_diverse <- mean(sapply(diverse_list, function(x) intra_list_similarity(x, sim_matrix = item_sim)))
# Load libraries
library(recommenderlab)
library(Matrix)
# Load the built-in Jester5k dataset (5,000 users × 100 jokes)
data(Jester5k, package = "recommenderlab")
rrm <- Jester5k
# 80–20 split, 10 observed ratings per user retained for "known"
set.seed(123)
scheme <- evaluationScheme(rrm, method = "split", train = 0.8, given = 10, goodRating = 3)
# User-User Collaborative Filtering (UBCF)
rec_UBCF <- Recommender(getData(scheme, "train"), method = "UBCF")
# SVD-based model
rec_SVD <- Recommender(getData(scheme, "train"), method = "SVD")
# Predict ratings
pred_UBCF <- predict(rec_UBCF, getData(scheme, "known"), type = "ratings")
pred_SVD  <- predict(rec_SVD,  getData(scheme, "known"), type = "ratings")
# Evaluate accuracy (RMSE/MAE)
acc <- rbind(
UBCF = calcPredictionAccuracy(pred_UBCF, getData(scheme, "unknown")),
SVD  = calcPredictionAccuracy(pred_SVD,  getData(scheme, "unknown"))
)
print(acc)
# ===== ORIGINAL SVD TOP-5 =====
topN_SVD <- predict(rec_SVD, getData(scheme, "known"), type = "topNList", n = 5)
original_items <- as(topN_SVD, "list")
original_items_int <- lapply(original_items, function(x) match(x, colnames(rrm)))
# ===== NEW: Cosine similarity matrix for jokes =====
item_sim <- similarity(rrm, method = "cosine", which = "items")
item_sim <- as.matrix(item_sim)
# ===== NEW: Replace Most Similar Item with Least Similar =====
diverse_replace <- lapply(original_items_int, function(item_list) {
if (length(item_list) < 2) return(item_list)  # skip too-short lists
pairs <- combn(item_list, 2)
sims <- apply(pairs, 2, function(pair) item_sim[pair[1], pair[2]])
most_similar_pair <- which.max(sims)
item_to_remove <- pairs[1, most_similar_pair]
reduced_list <- item_list[item_list != item_to_remove]
# Find least similar replacement from all items not in the list
all_items <- setdiff(1:ncol(rrm), item_list)
if (length(all_items) == 0) return(reduced_list)
avg_sims <- sapply(all_items, function(j) mean(item_sim[j, reduced_list]))
least_similar <- all_items[which.min(avg_sims)]
c(reduced_list, least_similar)
})
# Reconstruct topNList
pred_diverse <- new("topNList",
items = diverse_replace,
itemLabels = colnames(rrm),
n = as.integer(5))
# ===== Shuffle Strategy (from original code) =====
set.seed(123)
diverse_shuffled <- lapply(original_items, function(x) {
sampled_chars <- sample(x, length(x))
match(sampled_chars, colnames(rrm))
})
pred_shuffled <- new("topNList",
items = diverse_shuffled,
itemLabels = colnames(rrm),
n = as.integer(5))
# Gives you precision and recall of the original SVD top 5 listed.
# Evaluate original SVD top-N recommendations
eval_orig <- evaluate(scheme, method = "SVD", type = "topNList", n = 5)
avg_prec_orig <- avg(eval_orig, "prec")
avg_rec_orig <- avg(eval_orig, "rec")
cat(sprintf("Original Precision: %.3f, Recall: %.3f\n", avg_prec_orig, avg_rec_orig))
# print some approximation or note on diverse recommendations accuracy here
# Approximate precision for diverse SCD recommendations:
# Check how many recommended items appear in the unknown/test data for each user
unknown_data <- getData(scheme, "unknown")
calc_precision_recall <- function(pred_list) {
lists <- as(pred_list, "list")
precision <- mean(sapply(seq_along(lists), function(u) {
recommended <- lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(recommended) == 0) return(NA)
length(intersect(recommended, relevant)) / length(recommended)
}), na.rm = TRUE)
recall <- mean(sapply(seq_along(lists), function(u) {
recommended <- lists[[u]]
relevant <- which(!is.na(unknown_data[u, ]))
if (length(relevant) == 0) return(NA)
length(intersect(recommended, relevant)) / length(relevant)
}), na.rm = TRUE)
return(c(Precision = precision, Recall = recall))
}
# Calculate precision/recall
pr_orig <- calc_precision_recall(topN_SVD)
pr_shuf <- calc_precision_recall(pred_shuffled)
pr_divr <- calc_precision_recall(pred_diverse)
#Compares the original SVD and Diverse SVD
diverse_lists <- as(pred_diverse, "list")
library(proxy)
item_sim <- similarity(rrm, method = "cosine", which = "items")
item_sim <- as.matrix(item_sim)  # <-- convert to matrix
intra_list_similarity <- function(item_list, sim_matrix) {
if (length(item_list) < 2) return(0)
pairs <- combn(item_list, 2)
sims <- apply(pairs, 2, function(pair) sim_matrix[pair[1], pair[2]])
mean(sims)
}
original_items_int <- lapply(original_items, function(x) match(x, colnames(rrm)))
ils_values <- sapply(original_items_int, function(x) intra_list_similarity(x, sim_matrix = item_sim))
avg_ils_orig <- mean(ils_values)
cat("Average intra-list similarity (original):", avg_ils_orig, "\n")
cat("Original SVD diversity (intra-list similarity): ", avg_ils_orig, "\n")
avg_ils_diverse <- mean(sapply(diverse_replace, function(x) intra_list_similarity(x, sim_matrix = item_sim)))
cat("Diverse Replace SVD diversity (intra-list similarity): ", avg_ils_diverse, "\n")
# Intra-list similarity for shuffled list
ils_shuf <- mean(sapply(diverse_shuffled, function(x) intra_list_similarity(x, sim_matrix = item_sim)), na.rm = TRUE)
# Coverage
coverage <- function(item_lists) length(unique(unlist(item_lists)))
cov_orig <- coverage(original_items_int)
cov_shuf <- coverage(diverse_shuffled)
cov_divr <- coverage(diverse_replace)
# Results Table
results <- data.frame(
Model = c("Original SVD", "Shuffled", "Diverse Replace"),
Precision = c(pr_orig["Precision"], pr_shuf["Precision"], pr_divr["Precision"]),
Recall    = c(pr_orig["Recall"], pr_shuf["Recall"], pr_divr["Recall"]),
ILS       = c(avg_ils_orig, ils_shuf, avg_ils_diverse),
Coverage  = c(cov_orig, cov_shuf, cov_divr)
)
print(round(results, 3))
# Intra-list similarity for shuffled list
ils_shuf <- mean(sapply(diverse_shuffled, function(x) intra_list_similarity(x, sim_matrix = item_sim)), na.rm = TRUE)
# Coverage
coverage <- function(item_lists) length(unique(unlist(item_lists)))
cov_orig <- coverage(original_items_int)
cov_shuf <- coverage(diverse_shuffled)
cov_divr <- coverage(diverse_replace)
# Results Table
results <- data.frame(
Model = c("Original SVD", "Shuffled", "Diverse Replace"),
Precision = c(pr_orig["Precision"], pr_shuf["Precision"], pr_divr["Precision"]),
Recall    = c(pr_orig["Recall"], pr_shuf["Recall"], pr_divr["Recall"]),
ILS       = c(avg_ils_orig, ils_shuf, avg_ils_diverse),
Coverage  = c(cov_orig, cov_shuf, cov_divr)
)
results <- results %>% mutate_if(is.numeric, ~ round(., 3))
print(results)
# Intra-list similarity for shuffled list
ils_shuf <- mean(sapply(diverse_shuffled, function(x) intra_list_similarity(x, sim_matrix = item_sim)), na.rm = TRUE)
# Coverage
coverage <- function(item_lists) length(unique(unlist(item_lists)))
cov_orig <- coverage(original_items_int)
cov_shuf <- coverage(diverse_shuffled)
cov_divr <- coverage(diverse_replace)
# Results Table
results <- data.frame(
Model = c("Original SVD", "Shuffled", "Diverse Replace"),
Precision = c(pr_orig["Precision"], pr_shuf["Precision"], pr_divr["Precision"]),
Recall    = c(pr_orig["Recall"], pr_shuf["Recall"], pr_divr["Recall"]),
ILS       = c(avg_ils_orig, ils_shuf, avg_ils_diverse),
Coverage  = c(cov_orig, cov_shuf, cov_divr)
)
results <- results %>% mutate_if(is.numeric, ~ round(., 3))
print(results)
# Intra-list similarity for shuffled list
ils_shuf <- mean(sapply(diverse_shuffled, function(x) intra_list_similarity(x, sim_matrix = item_sim)), na.rm = TRUE)
# Coverage
coverage <- function(item_lists) length(unique(unlist(item_lists)))
cov_orig <- coverage(original_items_int)
cov_shuf <- coverage(diverse_shuffled)
cov_divr <- coverage(diverse_replace)
# Results Table
results <- data.frame(
Model = c("Original SVD", "Shuffled", "Diverse Replace"),
Precision = c(pr_orig["Precision"], pr_shuf["Precision"], pr_divr["Precision"]),
Recall    = c(pr_orig["Recall"], pr_shuf["Recall"], pr_divr["Recall"]),
ILS       = c(avg_ils_orig, ils_shuf, avg_ils_diverse),
Coverage  = c(cov_orig, cov_shuf, cov_divr)
)
print(results)
